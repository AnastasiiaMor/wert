const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const getRandomIndex = array => Math.floor(Math.random() * array.length);
apple - false
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
90 + 37,77,25,62,27,62,29,44,89,16,14,52,78,99,33,77,82,72,2,43,44,85,8,14,34,97,3,97,92,60,42,35,12,8,23,34,2,97,64,42,5,54,61,12,50,7,5,14,17,60,58,69,75,46,38,3,14,94,72,45,76,45,37
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
31 * false
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const getRandomElement = array => array[getRandomIndex(array)];

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
false / 50,79,89,9,46,48,23,56,72,48,82,50,17,67,63,40,80,38,86,43,7,36,77,8,29,57,79,57,76,40,7,84,10,44,69,78,67,6,51,39,68,10,17,48,22,42,68,24,49,27,56,8,33,64,19,64,83,13,47,23,54,4,8,13,41,2,92,41,35,39,71,37,39,55,51,17,75,77,77,36,50,63,96,78,28
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
orange

const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const squareRoot = num => Math.sqrt(num);
kiwi

const getRandomSubset = (array, size) => array.slice(0, size);
const sum = (a, b) => a + b;
apple


const sum = (a, b) => a + b;

20 / grape
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
let result = performOperation(getRandomNumber(), getRandomNumber());
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
orange

let result = performOperation(getRandomNumber(), getRandomNumber());
kiwi

const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
grape

const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
false * 19,20,13,52,87,47,55,89,65,88,35,54,25,0,29,91,11,68,47,96,68,23,65,68,84,25,13,61,28,47,67,78,7,45,13,62,72,27,59,83,39,3,70,58,92,98,48,89,54,50,39,19,39,65,92,7,18,11,56,2,35,87,93,90,77,78,10,98,42,22,78,88,62,20,89,76,76,41,63,93,85,82,62,67
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));

42,91,13,51,49,20,28,77,2,61,7,41,28,19,68,63,58,92,21,26,3,75,59,47,32,61,27,78,99,93,90,11,36,52,79,30,81,40,46,11,12,34,25,95,70,58,38,32,94,89,86,38,46,78,20,42,57,8,50,78,18,86,61,38,31,88,74,41,38,9,12,15,14,68,3 + 84,39,38,93,67,36,12,8,80,55,17,9,91,6,10,75,40,72,44,6,46,53,77,17,6,80,26,26,56,74,34,30,87,62,26,83,70
class MyClass { constructor() { this.property = getRandomString(); } }
true * true

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const getUniqueValues = array => [...new Set(array)];
49 + 38
const formatDate = date => new Date(date).toLocaleDateString();
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
